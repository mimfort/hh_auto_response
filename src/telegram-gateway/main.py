"""
Bot Runner - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î)
"""
import asyncio
import logging
from aiogram import Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage


from app.di import get_container



async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î)"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    
    # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
    print("\nüíº HH.ru Auto-Apply Bot")
    print("==================================================")
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ hh.ru...")
    print("üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Microservices + Clean Architecture")
    print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: Domain ‚Üí Application ‚Üí Infrastructure ‚Üí Adapters")
    print("üéØ –§—É–Ω–∫—Ü–∏–∏: –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π | –ú–∞—Å—Å–æ–≤—ã–µ –æ—Ç–∫–ª–∏–∫–∏ | –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    try:
        # ‚úÖ –£–±—Ä–∞–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –ë–î —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        
        print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è telegram-gateway —Å–µ—Ä–≤–∏—Å–∞...")
        container = get_container()
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram API (—É–¥–∞–ª–µ–Ω–∏–µ webhook)...")
        await container.bot.delete_webhook(drop_pending_updates=True)
        
        # –°–æ–∑–¥–∞–µ–º Dispatcher —Å FSM storage
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        print("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...")
        # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
        from app.adapters.middleware import DatabaseMiddleware
        dp.message.middleware(DatabaseMiddleware(container))
        dp.callback_query.middleware(DatabaseMiddleware(container))
        
        print("üéõÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤...")
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–µ–∑ —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç middleware)
        handlers = container.get_handlers()
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
        dp.include_router(handlers.router)
        

        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–º middleware
        print("‚úÖ Telegram Gateway –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("ÔøΩ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        print("==================================================")
        await dp.start_polling(container.bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram Gateway: {str(e)}")
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞:")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if 'container' in locals() and hasattr(container, 'bot'):
            await container.bot.session.close()
            print("üëã Telegram Gateway –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nÔøΩ HH Auto-Apply Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ telegram-gateway —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
        logging.exception("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞:")