"""
Message Formatting Service - —Å–µ—Ä–≤–∏—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
"""
from app.application.interfaces.formatters import IMessageFormattingService

class MessageFormattingService(IMessageFormattingService):
    """–ß–∏—Å—Ç–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —à–∏—Ä–∏–Ω—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    MAX_WIDTH = 35  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
    SEPARATOR_LINE = "‚ôªÔ∏è" * 20
    THIN_LINE = "" * 30
    HEADER_SEPARATOR = "‚ôªÔ∏è" * 20
    
    def _wrap_text(self, text: str) -> str:
        """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —à–∏—Ä–∏–Ω–µ"""
        import textwrap
        lines = text.split('\n')
        wrapped_lines = []
        
        for line in lines:
            # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —à–∏—Ä–∏–Ω—ã
            clean_line = line.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            
            if len(clean_line) <= self.MAX_WIDTH:
                wrapped_lines.append(line)
            else:
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è—è HTML —Ç–µ–≥–∏
                if '<b>' in line or '<i>' in line:
                    # –î–ª—è —Å—Ç—Ä–æ–∫ —Å HTML —Ç–µ–≥–∞–º–∏ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    wrapped_lines.append(line)
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å
                    wrapped = textwrap.fill(line, width=self.MAX_WIDTH)
                    wrapped_lines.extend(wrapped.split('\n'))
        
        return '\n'.join(wrapped_lines)

    def _add_consistent_width(self, text: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        return f"{self.THIN_LINE}\n{text}\n{self.THIN_LINE}"
    
    def format_welcome_message(self, user_first_name: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user_first_name}</b>!\n\n"
            "–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞ HeadHunter.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
        )
        welcome_text = self._wrap_text(welcome_text)
        return self._add_consistent_width(welcome_text)
    
