"""
Pagination Service - —Å–µ—Ä–≤–∏—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
"""
from typing import List, TypeVar, Generic, Dict, Any
from dataclasses import dataclass

T = TypeVar('T')


@dataclass
class PaginationInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    current_page: int
    total_pages: int
    items_per_page: int
    total_items: int
    start_item: int
    end_item: int
    has_previous: bool
    has_next: bool


class PaginationService(Generic[T]):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    
    def calculate_pagination(
        self, 
        items: List[T], 
        page: int = 0, 
        items_per_page: int = 5
    ) -> tuple[List[T], PaginationInfo]:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –¥–ª—è —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        
        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—ç–ª–µ–º–µ–Ω—Ç—ã_—Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è_–æ_–ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        """
        total_items = len(items)
        total_pages = (total_items + items_per_page - 1) // items_per_page if total_items > 0 else 1
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = max(0, min(page, total_pages - 1))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, total_items)
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_items = items[start_idx:end_idx]
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_info = PaginationInfo(
            current_page=page,
            total_pages=total_pages,
            items_per_page=items_per_page,
            total_items=total_items,
            start_item=start_idx + 1 if total_items > 0 else 0,
            end_item=end_idx,
            has_previous=page > 0,
            has_next=page < total_pages - 1
        )
        
        return page_items, pagination_info
    
    def build_navigation_buttons(
        self, 
        pagination_info: PaginationInfo, 
        callback_prefix: str,
    ) -> List[Dict[str, str]]:
        """
        –°—Ç—Ä–æ–∏—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        Args:
            pagination_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, "admin_cities")
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        navigation_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if pagination_info.has_previous:
            navigation_buttons.append({
                "text": "‚¨ÖÔ∏è –ü—Ä–µ–¥.",
                "callback_data": f"{callback_prefix}_page_{pagination_info.current_page - 1}"
            })
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        if pagination_info.total_pages > 1:
            navigation_buttons.append({
                "text": f"üìÑ {pagination_info.current_page + 1}/{pagination_info.total_pages}",
                "callback_data": f"{callback_prefix}_info"
            })
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if pagination_info.has_next:
            navigation_buttons.append({
                "text": "–°–ª–µ–¥. ‚û°Ô∏è",
                "callback_data": f"{callback_prefix}_page_{pagination_info.current_page + 1}"
            })
        
        return navigation_buttons
    
    def format_pagination_text(
        self, 
        pagination_info: PaginationInfo, 
        entity_name: str = "—ç–ª–µ–º–µ–Ω—Ç–æ–≤"
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        
        Args:
            pagination_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            entity_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≥–æ—Ä–æ–¥–æ–≤", "–¥–æ–º–æ–≤")
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if pagination_info.total_items == 0:
            return f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {entity_name}</b>"
        
        text = f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {pagination_info.current_page + 1} –∏–∑ {pagination_info.total_pages}\n"
        text += f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {pagination_info.start_item}-{pagination_info.end_item} –∏–∑ {pagination_info.total_items} {entity_name}"
        
        return text
